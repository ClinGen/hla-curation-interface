[project]
name = "hla-curation-interface"
version = "0.1.0"
description = "The HLA Curation Interface (HCI) is a tool designed to facilitate the curation of information about HLA alleles and haplotypes."
readme = "README.rst"
requires-python = ">=3.13"
dependencies = [
    "django>=5.2.1",
    "firebase-admin>=6.8.0",
    "gunicorn>=23.0.0",
    "python-dotenv>=1.1.0",
    "sentry-sdk[django]>=2.29.1",
    "whitenoise[brotli]>=6.9.0",
]

[dependency-groups]
dev = [
    "sphinx>=8.2.3",
    "ruff>=0.11.11",
    "coverage>=7.8.2",
    "furo>=2024.8.6",
    "ansible>=11.6.0",
    "ansible-lint>=25.5.0",
]

[tool.ruff]
line-length = 88
target-version = "py313"
exclude = [
    "__pycache__",
    "docs",
    "migrations",
]

[tool.ruff.lint]
preview = true  # Use Ruff's "preview" (beta) features.
select = [
    # Basics:
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes rules
    "N",    # pep8-naming rules (enforce PEP8 naming conventions)
    "C90",  # mccabe (don't allow high cyclomatic complexity)

    # Imports:
    "I",    # isort rules (sort imports)

    # Docstrings:
    "D",    # pydocstyle (enforce style for docstrings)
    "DOC",  # pydoclint (lint docstrings)

    # flake8 plugins:
    "ANN",   # flake8-annotations........... use PEP 3107 function annotations
    "S",     # flake8-bandit................ perform security-focused static analysis
    "FBT",   # flake8-boolean-trap.......... don't use boolean trap antipattern
    "B",     # flake8-bugbear............... provide an opinionated set of lint rules
    "A",     # flake8-builtins.............. provide a set of lint rules for builtins
    "COM",   # flake8-commas................ provide a set of lint rules for commas
    "C4",    # flake8-comprehensions........ provide a set of lint rules for comprehensions
    "DTZ",   # flake8-datetimez............. use the datetime library safely
    "T10",   # flake8-debugger.............. don't allow debugging code
    "DJ",    # flake8-django................ provide a set of lint rules for Django
    "EM",    # flake8-errmsg................ provide a set of rules for error messages
    "EXE",   # flake8-executable............ provide a set of lint rules for Python scripts
    "ISC",   # flake8-implicit-string-concat provide a set of lint rules for string concatenation
    "LOG",   # flake8-logging............... provide a set of lint rules for logging
    "G",     # flake8-logging-format........ provide a set of lint rules for the format of log strings)
    "INP",   # flake8-no-pep420............. don't allow implicit namespaces
    "PIE",   # flake8-pie................... provide a set of miscellaneous lint rules
    "T20",   # flake8-print................. don't allow print statements; use logs instead
    "Q",     # flake8-quotes................ provide a set of lint rules about quotes
    "RSE",   # flake8-raise................. provide a set of lint rules for the raise statement
    "RET",   # flake8-return................ provide a set of lint rules for the return statement
    "SLF",   # flake8-self.................. don't allow access to private members
    "SIM",   # flake8-simplify.............. provide a set of lint rules for simplifying various expressions
    "TID",   # flake8-tidy-imports.......... provide a set of lint rules for imports
    "TD",    # flake8-todos................. provide a set of lint rules for to-do comments
    "ARG",   # flake8-unused-arguments...... provide a set of lint rules for unused arguments
    "PTH",   # flake8-use-pathlib........... use the new pathlib library

    # Other:
    "PERF",  # Perflint (provide a set of lint rules for performance)
    "UP",    # pyupgrade (use new Python syntax)
    "RUF",   # Ruff-specific rules (provide a set of miscellaneous lint rules)
    "TRY",   # tryceratops (provide a set of lint rules for try-except statements)
]
ignore = [
    "COM812", # This rule clashes with Ruff.
    "G004",   # Not using f-strings in logs seems like a premature optimization.
    "RUF012", # Django models be like that.
    "RUF100", # With Ruff 0.11.5, I'm seeing false positives.
    "S314",   # While I agree with this rule, it suggests using an outdated third-party package.
    "S405",   # While I agree with this rule, it suggests using an outdated third-party package.
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "D104", # Docstrings in these files are overkill.
]
"tests.py" = [
    "ANN201", # Tests should always return `None`.
    "D101", # Tests should be obvious enough not to require docstrings.
    "D102", # Tests should be obvious enough not to require docstrings.
]

[tool.coverage.run]
data_file = "coverage.db"
omit = [
    "*/apps.py",
    "*/manage.py",
    "*/migrations/*",
    "*/settings.py",
    "*/templates.py",
    "*/tests.py",
    "*/urls.py",
    "*/wsgi.py",
    ".venv/*",
]

[tool.coverage.html]
directory = "coverage"
